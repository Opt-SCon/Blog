{
    "categories": [
        {
            "id": 1,
            "name": "技术",
            "description": "技术相关文章"
        },
        {
            "id": 2,
            "name": "生活",
            "description": "生活随笔"
        }
    ],
    "articles": [
        {
            "id": 1,
            "title": "欢迎使用我的博客",
            "content": "\n# 欢迎使用我的博客系统！\n\n这是一个示例文章，展示了博客系统的基本功能。\n\n## 主要功能\n\n1. 文章管理\n2. 分类管理\n3. 评论系统\n4. 后台管理\n\n## 开始使用\n\n1. 首先进入后台管理页面注册管理员账号\n2. 登录后即可开始管理您的博客\n3. 可以创建新的文章和分类\n4. 可以管理评论和其他设置\n\n祝您使用愉快！\n\t\t\t\t",
            "categoryId": 1,
            "date": "2024-12-23T03:15:30.066625",
            "views": 5,
            "likes": 6,
            "comments": []
        },
        {
            "id": 2,
            "title": "阿斯顿发送到发",
            "content": "阿斯顿发送到发送到发送到发送到",
            "categoryId": 2,
            "date": "2024-12-23T03:18:45.396082",
            "views": 5,
            "likes": 28,
            "comments": [
                {
                    "content": "撒发送到发",
                    "date": "2024-12-23T03:19:01.435693",
                    "id": 1
                },
                {
                    "content": "阿斯顿发送到发送到发",
                    "date": "2024-12-23T03:19:04.177817",
                    "id": 2
                },
                {
                    "content": "1234123",
                    "date": "2024-12-24T07:27:57.196499",
                    "id": 3
                }
            ]
        },
        {
            "id": 3,
            "title": "asdfasdf",
            "content": "\n\n\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n\n\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n\n\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n\n\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n\n\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n\n\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n&nbsp;\n\n\n",
            "categoryId": 1,
            "date": "2024-12-24T11:19:12.124558",
            "views": 2,
            "likes": 0,
            "comments": []
        },
        {
            "id": 4,
            "title": "sdadf",
            "content": "## 难度一览\n* 简单题：[A](##a)、[D](##d)、[L](##l)\n* 中等题：[B](##b)、[G](##g)、[H](##h)、[I](##i)、[M](##m)\n* 难题：[E](##e)、[F](##f)、[J](##j)、[K](##k)\n\n## A\n题意：找到矩形的长和宽、利用最大公约数化简。\n\n```c++\n#include \nchar s[520][520];\nint n, m;\n\nint gcd(int a, int b) {\n    return b ? gcd(b, a % b) : a;\n}\n\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 0; i          scanf(\"%s\", (s + i));\t// s + i 就相当于s[i]\n\n    int wid = 0, hei = 0, stx, sty; // 矩形宽度、高度以及矩阵开始坐标\n    int flag = 0; // 标记是否找到起始点'x'\n\n    // 查找第一个'x'的位置作为起始点\n    for (int i = 0; i          for (int j = 0; j              if (s[i][j] == 'x') {\n                stx = i;\n                sty = j;\n                flag = 1;\n                break;\n            }\n        }\n        if (flag) break; // 如果找到'x'，则退出循环\n    }\n\n    // 从起始点开始，向下计算高度\n    for (int i = stx; i          if (s[i][sty] == 'x') ++hei;\n        else break; // 如果遇到非'x'字符，则停止计算高度\n    }\n\n    // 从起始点开始，向右计算宽度\n    for (int j = sty; j          if (s[stx][j] == 'x') ++wid;\n        else break; // 如果遇到非'x'字符，则停止计算宽度\n    }\n\n    // 计算找到的矩形区域的宽和高的最大公约数，用于找到最小矩形\n    int t = gcd(wid, hei);\n    wid /= t;\n    hei /= t;\n\n    for (int i = 1; i          for (int j = 1; j              putchar('x');\n        }\n        puts(\"\"); // 输出换行符\n    }\n    return 0;\n}\n```\n\n## B\n题意：计算**有多少个数，恰好等于集合中另外两个（不同的）数之和**\n\n### 方法一\n用一个数组标记 i 的数量，循环两数和与第一个数，判断另一个数是否存在。\n\n```c++\nint a[100010];\nint num[100010];\t//每个数的数量\nint n, m;\n\nint main() {\n    scanf(\"%d\", &n);\n    for (int i = 1; i          scanf(\"%d\", &a[i]);\n        num[a[i]]++;\n    }\n    int ans = 0;\n    for (int i = 1; i          for (int j = 1; j              if (a[j] a[i]) continue;\n            int k = a[i] - a[j];\t//判断第二个数是否存在\n            if (k == a[j]) {\t//如果两数相同需要判断是否有两个\n                if (num[k] 1) {\n                    ++ans;\n                    break;\n                }\n            } else {\n                if (num[k]) {\t//如果第二个数存在那么答案++\n                    ++ans;\n                    break;\n                }\n            }\n        }\n    }\n    cout      return 0;\n}\n```\n\n### 方法二\n```c++\n// 先排序，再找前面有多少组数据满足\n// 该题要注意：都是正整数，因此l++后，和一定增加，r--后，和一定减少\nconst int N = 100;\nint a[N];\nint n;\nvoid solve()\n{\n\tint ans = 0;// 答案\n\tint flag = n - 1;// 目标和的下标\n\twhile (flag >= 2)// 一定要满足有三个数l, r, flag\n\t{\n\t\tint l = 0, r = flag - 1;\n\t\twhile (l  \t\t{\n\t\t\tif (a[l] + a[r] == a[flag])\n\t\t\t{\n\t\t\t\tans++;\n\t\t\t\tbreak;// 得出答案就退出，因为他并不需要计算有多少组满足 a[l] + a[r] = a[flag]\n\t\t\t}\n\t\t\telse if (a[l] + a[r] a[flag])\n\t\t\t\tr--;\n\t\t\telse\n\t\t\t\tl++;\n\t\t}\n\t\tflag--;\n\t}\n\tcout  }\nint main()\n{\n\tcin >n;\n\tfor (int i = 0; i  \t\tcin >a[i];\n\tsort(a, a + n);\n\tsolve();\n\treturn 0;\n}\n```\n\n## C\n签到题，按题意输出即可\n\n```c++\n#include\nint main()\n{\n\tprintf(\"Concentration Acceptance Software\");\n\treturn 0;\n}\n```\n\n## D\n每个题单在当天 dyh 都会写一个题。 对于每个题单增长到最高的时候只有两种情况\n\n* ① 被清空后递增到 n 后又递减回来\n* ② 被清空后递减到 1 后又递增回来\n  假设当前题单 i，前面有 x 个题单，后面有 y 个题单\n  例举可以发现最大数量为 max(x,y)*2 个题。\n\n```c++\n#include \nusing namespace std;\nint n;\nint main() {\n\tcin >n;\n\tfor (int i = 0; i  \t\t// 对于当前题单i，计算其前面和后面的题单数量中的较大值\n\t\t// i表示当前题单的索引，n-i-1表示当前题单后面的题单数量\n\t\tint x = max(i, n - i - 1);\n\t\t// 1. 被清空后递增到n后又递减回来\n\t\t// 2. 被清空后递减到1后又递增回来\n\t\t// 在这两种情况下，最大数量都是前后题单数量的两倍\n\t\tcout  \t}\n\treturn 0;\n}\n```\n\n## E\n```c++\n//橙子蛋糕\n#include\nusing namespace std;\n\nint main()\n{\n    long long n, k;\n    scanf(\"%lld%lld\",&n,&k);\n\n    // 推断易得 k 与 n - k 的结果一样，故要判断补数n - k\n    // 如果 k 大于 n 的一半，则计算 k 的补数，并赋值回 k\n    if (k n / 2)\n        k = n - k; // 选择较小的 k 可以简化后续计算\n\n    // 如果 k 等于 n 减 k，即刚好是对角，就可以直接输出 n\n    if (k == n - k)\n        printf(\"%lld\",n);\n    else\n        // 正常的选取情况就是 n*k + 1\n        printf(\"%lld\",n * k + 1);\n\n    return 0;\n}\n```\n\n## F\n因为要求舍入后的最大值，所以只需要找到能舍入的最高位即可（从左往右第一个 $>=5$的数）\n\n```c++\nconst int N = 2e5 + 10;\nchar s[N];\nint n, t;\nint main() {\n    scanf(\"%d %d\", &n, &t);\n    scanf(\"%s\", s);\n    int pos;//记录小数点的位置\n    for (int i = 0; i          if (s[i] == '.') {\n            pos = i;\n            break;\n        }\n    }\n    int len = n; //记录保留字符串的长度\n    for (int i = pos + 1; i          if (s[i] >= '5') { //从左往右找到第一个大于等于5的数字的位置开始四舍五入\n            len = i;\n            t--;\n            i--;\n            while (s[i] == '4' && t != 0) { //检查是否能继续四舍五入\n                len = i;\n                t--;\n                i--;\n            }\n            if (s[i] == '.') { //检查是否需要进位到整数部分\n                len = i;\n                i--;\n                while (s[i] == '9') { //处理如果进位到整数最后一位是9的情况\n                    s[i] = '0';\n                    i--;\n                }\n                if (i == -1) {\n                    printf(\"1\");//处理进位到最前面的情况（如99.5到100）\n                }\n                else s[i] += 1;\n            }\n            else s[i] += 1;\n            break;\n        }\n    }\n    for (int i = 0; i          printf(\"%c\", s[i]);\n    }\n    return 0;\n}\n```\n\n## G\n```c++\nint t, n;\nint a[200005], x;\nint ans = -1000000;\nint main() {\n    scanf(\"%d\", &n);\n    for (int i = 1; i          scanf(\"%d\", &a[i]);\n        if (x + a[i] 0)\n            x += a[i];\n        // 判断是否将当前整数加入当前的子序列中\n        // 如果加入后子序列的和仍然为正，则加入\n        else\n            x = a[i]; //说明a[i]是负数，但记下这个负数的原因是防止所有元素都是负数\n        //都是负数的话，答案理应是最大的那个负数\n        ans= max(ans, x);\n    }\n    printf(\"%d\\n\", ans);\n}\n```\n\n## H\n注意一个地方可以购买多次，如果位置 i 的价格是 $ i $ 到 $ n $ 价格中最小的那么就尽可能多购买。\n\n```c++\nconst int N=2e5+10;\nint a[N],mi[N];\n\nvoid solve() {\n\tint n;\n    scanf(\"%d\", &n);\n\tfor (int i = 0; i          scanf(\"%d\", &a[i]);\n\t}\n\tmi[n] = 2e9; // 将最后一个元素初始化为一个很大的值，以便后续比较\n\tfor (int i = n - 1; i >= 0; --i) {\n\t\tmi[i] = min(a[i], mi[i + 1]); // 从后往前找最小值\n\t}\n\tint ans = 0;\n\tint sum = 0;\n\tfor (int i = 0; i  \t\t++sum; // 每次循环增加计数\n\t\tif (a[i] == mi[i]) { // 如果当前元素是该位置后的最小值\n\t\t\tint t = sum / a[i]; // 计算可以“消耗”的块数\n\t\t\tans += t; // 更新结果\n\t\t\tsum -= t * a[i]; // 减去所“消耗”的数量\n\t\t}\n\t}\n    printf(\"%d\\n\", ans);\n}\nint main() {\n\tsolve();\n\treturn 0;\n}\n```\n\n## I\n对于唐嘉富来说，最优的策略是对数组中最大的 x 个元素取反。因此，为了最小化唐嘉富造成的损害，孙洁龙应该总是移除一些最大的元素。 为了解决这个问题，我们可以对数组进行排序，并遍历 i（0≤i≤k），其中 i 是孙洁龙移除的元素数量。 对于每个 i，我们知道孙洁龙将移除数组中最大的 i 个元素，然后唐嘉富会对剩下的 x 个最大元素取反。 因此，我们可以利用前缀和快速计算出最终的和。由于排序的存在，时间复杂度为 O(nlogn)。\n\n```c++\n#include \nusing namespace std;\nint A[2000010];\nvoid solve() {\n\tint n, k, x;\n\tcin >n >k >x;\n\tfor (int i = 1; i  \t\tcin >A[i];\n\tsort(A + 1, A + n + 1, greater()); // 这里使用了C++的排序函数sort，C语言可使用qsort函数或者手搓快速排序。\n\n\tfor (int i = 1; i  \t\tA[i] += A[i - 1];// 计算前缀和，A[i]现在表示前i个元素的和\n\n\tint ans = -1e9; // 初始化答案为一个非常小的数（负无穷大的近似值）\n\t// 遍历孙洁龙可能移除的元素数量 i（ 0 到 k ）\n\tfor (int i = 0; i  \t\t// 更新答案，取当前答案和（ A[n]（总和）- 2 * A[min(i + x, n)]（\n\t\t//移除i个后唐嘉富取反x个的和的两倍，因为取反相当于减去两倍）+ A[i]（孙洁龙移除i个的和））的较大值\n\t\tans = max(ans, A[n] - 2 * A[min(i + x, n)] + A[i]);\n\n    printf(\"%d\\n\", ans);\n}\nint main() {\n\tint tc;\n    scanf(\"%d\", &tc);\n\twhile (tc--)\n\t\tsolve();\n}\n```\n\n## J\n通过画图易得：\n\n`1 x n` 答案就是 n，m 中得较大者\n\n`2 x n`分三种情况：\n\n* 第一种即 m 可以被 2 整除但不可以被 4 整除，那么最优方案即 `n + m`![](https://camo.githubusercontent.com/5c1b5619606c824a5bb01d5ef5383fbd39fc962fe7a9a55ec25052b6f30e73af/68747470733a2f2f67697465652e636f6d2f77656c6c6d652f70686f746f2f7261772f6d61737465722f646174612f63617379732532306d6f6434312e706e67)\n* 第二种即 m 即可被 2 整除又可被 4 整除，最优方案即放满其中一排即 `max(n, m)`![](https://camo.githubusercontent.com/f517ec53e291c83bd5e9e827d16f2a816251b3f44ac3c41b30f77e569a8454fc/68747470733a2f2f67697465652e636f6d2f77656c6c6d652f70686f746f2f7261772f6d61737465722f646174612f63617379736d6f6434312e706e67)\n* 第三种即 m 为奇数，最优方案为`max(n, m) + 1`![](https://camo.githubusercontent.com/7d39dd52fbbc16fc5fc3f37d3c04318fe53f6d714b85102a7f6574c588e50b3f/68747470733a2f2f67697465652e636f6d2f77656c6c6d652f70686f746f2f7261772f6d61737465722f646174612f515132303234313130332d3230343133392e706e67)\n\n其他情况易得数量为 `(n x m + 1) / 2`\n\n```c++\nvoid solve() {\n    int n, m;\n    cin >n >m;\n    if (n == 1 || m == 1)\n        printf(\"%d\\n\", max(n, m));\n    else if (n == 2 || m == 2) {\n        if (n == 2 && m % 2 == 0 && m % 4 != 0)\n            printf(\"%d\\n\", n + m);\n\n        else if (m == 2 && n % 2 == 0 && n % 4 != 0)\n            printf(\"%d\\n\", n + m);\n\n        else if (max(n, m) % 2 == 0)\n            printf(\"%d\\n\", max(n, m));\n\n        else printf(\"%d\\n\", max(n, m) + 1);\n    }\n    else printf(\"%d\\n\", (n * m + 1) / 2);\n}\n\nint main() {\n    int t = 1;\n    while (t--)\n        solve();\n    return 0;\n}\n```\n\n## K\n只需要先将每一个学妹以结束时间排一次序，得到一个排序后的结构体数组， 存储第一个学妹的结束时间，然后以结束时间为准， 跟下一个学妹开始时间比较，不小于第一个学妹的结束时间就证明不冲突，然后计数， 再记录下这个学妹的结束时间，以此类推，最后输出总次数就可以了。 （因为将结束时间排序，所以只要确定开始时间没有冲突，那整段时间就不会又任何冲突）\n\n```c++\n#include\n#include//算法库(包含sort函数)\nstruct st { //（定义一个结构体数组，分别储存开始时间和结束时间）\n\tint a;//（开始时间）\n\tint b;//（结束时间）\n} x[1000010];\n\nbool cmp(st x, st y) { //（不管开始时间，直接按照结束时间排序）\n\treturn x.b  }\n\nint main() {\n\tint n, ans = 1, cnt;\n\tscanf(\"%d\", &n);\n\tfor (int i = 1; i  \t\tscanf(\"%d%d\", &x[i].a, &x[i].b);\n\t}\n\tstd::sort(x + 1, x + n + 1, cmp); //（排序）亦可手写自定义关键字快速排序\n\tcnt = x[1].b; //（无脑记录第一个值）\n\tfor (int i = 2; i  \t\tif (x[i].a >= cnt) { //（找到符合要求的，记录）\n\t\t\tans++;//（计数）\n\t\t\tcnt = x[i].b;\n\t\t}\n\t}\n\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n## L\n由题意可得，合法得字符串一定是由 `iguang` 和 `guangshen` 组合而成得，所以我们只需要判断整个字符串是否只由这两种字符串组成。\n\n```c++\n#include \n#include \n\nchar s[500010];\n\nvoid solve() {\n    scanf(\"%s\", s);\n    int f = 0;\n    int i;\n    char a[7];\n    char b[10];\n    int len = strlen(s);\n    for (i = 0; i  \n        f = 0;\n        strncpy(a, s + i, 6);\n        a[6] = '\\0';\n\n        if (strcmp(a, \"iguang\") == 0) {\n            f = 6;\n        }\n\n        strncpy(b, s + i, 9);\n        b[9] = '\\0';\n\n        if (strcmp(b, \"guangshen\") == 0) {\n            f = 9;\n        }\n\n        if (f == 9) i += 9;\n        else if (f == 6) i += 6;\n        else break;\n    }\n    if (f == 0 && i      else printf(\"Yes\\n\");\n}\n\nint main() {\n    int t;\n    scanf(\"%d\", &t);\n    while (t--) solve();\n    return 0;\n}\n```\n\n## M\n能最多把 k 个 0 变成 1 的话，并且要求最多连续 1 的长度，那我们就可以直接遍历这 个数组，找到符合题目条件的长度，然后一直取到最大值即可，如果暴力遍历的 话肯定是会超时的，n 最大是`1e5`，k 最大是`1e5`，O（n * k）的复杂度是不行的， 本题可以先进行前缀和再采取双指针的解决方案复杂度为 O（n）。 因为数组中只有 0 或 1，因此前缀和的意思是方便找出区间的 1 的总个数，在遍历 的时候，判断条件必须是 $ (s[r] - s[l - 1] + k >= r - l + 1 ) $ ，`r`指针才会 往右加，不然就算 l 指针往右加。这个判断是意思是[l，r]区间的 1 的个数加上可 以把 0 变成 1 的个数，要大于这个区间长度，因为这个 k 是最多，所以可能会超 出.\n\n```c++\n#include \nusing namespace std;\nint a[100520],s[100520];\nint main() {\n\tint n, k;\n    scanf(\"%d%d\", &n, &k);\n\tfor (int i = 1; i          scanf(\"%d\", &a[i]);\n\n\tfor (int i = 1; i  \t\ts[i] = s[i - 1] + a[i];\n\t}\n\tint ans = -0x3f3f3f3f;\n\tint l = 1, r = 1;\n\twhile (r  \t\tif (s[r] - s[l - 1] + k >= r - l + 1) {\n\t\t\tans = max(ans, r - l + 1);\n\t\t\tr++;\n\t\t} else {\n\t\t\tl++;\n\t\t}\n\t}\n    printf(\"%d\\n\", ans);\n\treturn 0;\n}\n```\n\n",
            "categoryId": 1,
            "date": "2024-12-24T11:23:36.968334",
            "views": 2,
            "likes": 3,
            "comments": []
        },
        {
            "id": 5,
            "title": "公式",
            "content": "$x_i$\n\n#### Setting\n    {\n        tex  : true\n    }\n\n#### Custom KaTeX source URL\n\n```javascript\n// Default using CloudFlare KaTeX's CDN\n// You can custom url\neditormd.katexURL = {\n    js  : \"your url\",  // default: //cdnjs.cloudflare.com/ajax/libs/KaTeX/0.3.0/katex.min\n    css : \"your url\"   // default: //cdnjs.cloudflare.com/ajax/libs/KaTeX/0.3.0/katex.min\n};\n```\n\n#### Examples\n\n##### 行内的公式 Inline\n \n$$E=mc^2$$\n\nInline 行内的公式 $E=mc^2$ 行内的公式，行内的$$E=mc^2$$公式。\n\n$$c = \\\\pm\\\\sqrt{a^2 + b^2}$$\n\n$$x > y$$\n\n$$f(x) = x^2$$\n\n$$\\alpha = \\sqrt{1-e^2}$$\n\n$$\\(\\sqrt{3x-1}+(1+x)^2\\)$$\n             \n$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$\n\n$$\\\\dfrac{-b \\\\pm \\\\sqrt{b^2 - 4ac}}{2a}$$\n\n$$f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi$$\n\n$$\\displaystyle \\frac{1}{\\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}} {1+\\frac{e^{-8\\pi}} {1+\\cdots} } } }$$\n\n$$\\displaystyle \\left( \\sum\\_{k=1}^n a\\_k b\\_k \\right)^2 \\leq \\left( \\sum\\_{k=1}^n a\\_k^2 \\right) \\left( \\sum\\_{k=1}^n b\\_k^2 \\right)$$\n\n$$a^2$$\n\n$$a^{2+2}$$\n\n$$a_2$$\n\n$${x_2}^3$$\n\n$$x_2^3$$\n\n$$10^{10^{8}}$$\n\n$$a_{i,j}$$\n\n$$_nP_k$$\n\n$$c = \\pm\\sqrt{a^2 + b^2}$$\n\n$$\\frac{1}{2}=0.5$$\n\n$$\\dfrac{k}{k-1} = 0.5$$\n\n$$\\dbinom{n}{k} \\binom{n}{k}$$\n\n$$\\oint_C x^3\\, dx + 4y^2\\, dy$$\n\n$$\\bigcap_1^n p   \\bigcup_1^k p$$\n\n$$e^{i \\pi} + 1 = 0$$\n\n$$\\left ( \\frac{1}{2} \\right )$$\n\n$$x_{1,2}=\\frac{-b\\pm\\sqrt{\\color{Red}b^2-4ac}}{2a}$$\n\n$${\\color{Blue}x^2}+{\\color{YellowOrange}2x}-{\\color{OliveGreen}1}$$\n\n$$\\textstyle \\sum_{k=1}^N k^2$$\n\n$$\\dfrac{ \\tfrac{1}{2}[1-(\\tfrac{1}{2})^n] }{ 1-\\tfrac{1}{2} } = s_n$$\n\n$$\\binom{n}{k}$$\n\n$$0+1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+\\cdots$$\n\n$$\\sum_{k=1}^N k^2$$\n\n$$\\textstyle \\sum_{k=1}^N k^2$$\n\n$$\\prod_{i=1}^N x_i$$\n\n$$\\textstyle \\prod_{i=1}^N x_i$$\n\n$$\\coprod_{i=1}^N x_i$$\n\n$$\\textstyle \\coprod_{i=1}^N x_i$$\n\n$$\\int_{1}^{3}\\frac{e^3/x}{x^2}\\, dx$$\n\n$$\\int_C x^3\\, dx + 4y^2\\, dy$$\n\n$${}_1^2\\!\\Omega_3^4$$\n\n##### 多行公式 Multi line\n\n> \\`\\`\\`math or \\`\\`\\`latex or \\`\\`\\`katex\n\n```math\nf(x) = \\int_{-\\infty}^\\infty\n    \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\n    \\,d\\xi\n```\n\n```math\n\\displaystyle\n\\left( \\sum\\_{k=1}^n a\\_k b\\_k \\right)^2\n\\leq\n\\left( \\sum\\_{k=1}^n a\\_k^2 \\right)\n\\left( \\sum\\_{k=1}^n b\\_k^2 \\right)\n```\n\n```math\n\\dfrac{ \n    \\tfrac{1}{2}[1-(\\tfrac{1}{2})^n] }\n    { 1-\\tfrac{1}{2} } = s_n\n```\n\n```katex\n\\displaystyle \n    \\frac{1}{\n        \\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\n        \\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {\n        1+\\frac{e^{-6\\pi}}\n        {1+\\frac{e^{-8\\pi}}\n         {1+\\cdots} }\n        } \n    }\n```\n\n```latex\nf(x) = \\int_{-\\infty}^\\infty\n    \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\n    \\,d\\xi\n```\n\n#### KaTeX vs MathJax\n\n[https://jsperf.com/katex-vs-mathjax](https://jsperf.com/katex-vs-mathjax \"KaTeX vs MathJax\")\n\n",
            "categoryId": 1,
            "date": "2024-12-24T12:38:06.191272",
            "views": 2,
            "likes": 5,
            "comments": [
                {
                    "content": "# 224",
                    "date": "2024-12-24T13:44:36.701031",
                    "id": 1
                }
            ]
        }
    ],
    "admin": {
        "username": "wellwei",
        "password": "$2b$12$GeFj2pRLd6XmVb.C0xZxjeD/xX9pTbd8Zy69q6Kw6lJ9fhHHQA.VO"
    }
}